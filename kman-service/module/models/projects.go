package models

// Code generated by ksql.
// Do'nt Edit!!!
// Do'nt Edit!!!
// Do'nt Edit!!!
//
// from database: kman
// table:         projects
// orm version:   1.0.5
// created time:  2025-05-13 17:26:03
/**
Table DDL:
CREATE TABLE `projects` (
  `id` int NOT NULL AUTO_INCREMENT,
  `name` varchar(127) NOT NULL DEFAULT '' COMMENT '项目名称',
  `status` tinyint(1) NOT NULL DEFAULT '0' COMMENT '状态 0 - 正常 1 - 关闭',
  `create_time` bigint NOT NULL DEFAULT '0' COMMENT '创建时间',
  `update_time` bigint NOT NULL DEFAULT '0' COMMENT '更新时间',
  `namespace` varchar(63) NOT NULL DEFAULT '' COMMENT '命名空间',
  `open_id` varchar(32) NOT NULL DEFAULT '' COMMENT '项目key',
  PRIMARY KEY (`id`),
  UNIQUE KEY `name_UNIQUE` (`name`),
  UNIQUE KEY `namespace_UNIQUE` (`namespace`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci
*/

import (
	"context"

	"github.com/kovey/db-go/v3"
	"github.com/kovey/db-go/v3/model"
)

const (
	Table_Projects            = "projects"    //
	Table_Projects_CreateTime = "create_time" // 创建时间
	Table_Projects_Id         = "id"          //
	Table_Projects_Name       = "name"        // 项目名称
	Table_Projects_Namespace  = "namespace"   // 命名空间
	Table_Projects_OpenId     = "open_id"     // 项目key
	Table_Projects_Status     = "status"      // 状态 0 - 正常 1 - 关闭
	Table_Projects_UpdateTime = "update_time" // 更新时间
)

type Projects struct {
	*model.Model `db:"-" json:"-"` // model
	CreateTime   int64             `db:"create_time" json:"create_time"` // 创建时间
	Id           int               `db:"id" json:"id"`                   //
	Name         string            `db:"name" json:"name"`               // 项目名称
	Namespace    string            `db:"namespace" json:"namespace"`     // 命名空间
	OpenId       string            `db:"open_id" json:"open_id"`         // 项目key
	Status       int8              `db:"status" json:"status"`           // 状态 0 - 正常 1 - 关闭
	UpdateTime   int64             `db:"update_time" json:"update_time"` // 更新时间
}

func NewProjects() *Projects {
	return &Projects{Model: model.NewModel(Table_Projects, Table_Projects_Id, model.Type_Int)}
}

func (self *Projects) Save(ctx context.Context) error {
	return self.Model.Save(ctx, self)
}

func (self *Projects) Clone() ksql.RowInterface {
	return NewProjects()
}

func (self *Projects) Values() []any {
	return []any{&self.CreateTime, &self.Id, &self.Name, &self.Namespace, &self.OpenId, &self.Status, &self.UpdateTime}
}

func (self *Projects) Columns() []string {
	return []string{Table_Projects_CreateTime, Table_Projects_Id, Table_Projects_Name, Table_Projects_Namespace, Table_Projects_OpenId, Table_Projects_Status, Table_Projects_UpdateTime}
}

func (self *Projects) Delete(ctx context.Context) error {
	return self.Model.Delete(ctx, self)
}

func (self *Projects) Query() ksql.BuilderInterface[*Projects] {
	return model.Row(self)
}
